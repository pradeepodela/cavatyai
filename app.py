import streamlit as st
import requests
import base64
from PIL import Image
import io
import json
from datetime import datetime
import pandas as pd
import asyncio
import os
import tempfile
from dotenv import load_dotenv
import cv2
import numpy as np
import matplotlib.pyplot as plt
import ssl
import certifi

# Fix SSL context for Edge TTS
ssl._create_default_https_context = ssl._create_unverified_context
load_dotenv()

# Language translations dictionary
TRANSLATIONS = {
    "en": {
        "page_title": "ЁЯж╖ Dental Analysis Portal",
        "main_header": "ЁЯж╖ Dental Analysis Portal",
        "config": "тЪЩя╕П Configuration",
        "api_key_found": "тЬЕ OpenRouter API Key found in environment variables",
        "api_key_not_found": "тЪая╕П OpenRouter API Key not found in environment variables",
        "api_key_label": "OpenRouter API Key",
        "language_selection": "ЁЯМН Language / рднрд╛рд╖рд╛ / Idioma",
        "audio_settings": "ЁЯО╡ Audio Settings",
        "voice_selection": "Voice Selection",
        "speech_speed": "Speech Speed",
        "instructions": "ЁЯУЛ Instructions",
        "instructions_text": """
        1. Enter your OpenRouter API key
        2. Upload a clear image of the tooth/teeth
        3. Click 'Analyze Image' for instant analysis
        4. Get both report and audio summary automatically
        
        **Image Tips:**
        - Use good lighting
        - Keep the camera steady
        - Focus on the affected area
        - Avoid blurry images
        """,
        "disclaimer": "тЪая╕П Disclaimer",
        "disclaimer_text": "This AI analysis is for educational purposes only and should not replace professional dental consultation. Always consult with a qualified dentist for proper diagnosis and treatment.",
        "welcome_title": "Welcome to the Dental Analysis Portal",
        "welcome_text": "This AI-powered tool helps analyze dental images to identify potential cavities and provide comprehensive oral health insights with instant audio summaries.",
        "enter_api_key": "Please enter your OpenRouter API key in the sidebar to get started.",
        "upload_image": "ЁЯУд Upload Tooth Image",
        "upload_help": "Upload a clear image of the tooth or dental area you want analyzed",
        "uploaded_image": "Uploaded Image",
        "analyze_button": "ЁЯФН Analyze Image & Generate Audio",
        "analyzing": "ЁЯдЦ Analyzing dental image...",
        "generating_audio": "ЁЯОЩя╕П Generating audio summary...",
        "creating_audio": "ЁЯО╡ Creating audio file...",
        "analysis_complete": "тЬЕ Analysis complete!",
        "analysis_results": "ЁЯУК Analysis Results",
        "audio_summary": "ЁЯО╡ Audio Summary",
        "audio_summary_text": "Listen to your dental analysis summary below:",
        "download_audio": "ЁЯТ╛ Download Audio",
        "download_report": "ЁЯУД Download Report",
        "download_script": "ЁЯУЭ Download Script",
        "audio_failed": "ЁЯФК Audio generation failed, but you can still download the text summary:",
        "audio_script": "Audio Script",
        "analysis_failed": "тЭМ Analysis Failed",
        "cavity_stages_guide": "ЁЯУЪ Cavity Stages Guide",
        "stage_0": "No Cavity",
        "stage_0_desc": "Healthy tooth or very early demineralization",
        "stage_1": "Early Enamel Decay",
        "stage_1_desc": "White spots or early enamel damage",
        "stage_2": "Dentin Decay",
        "stage_2_desc": "Cavity has reached the dentin layer",
        "stage_3": "Pulp Involvement",
        "stage_3_desc": "Infection has reached the tooth's pulp",
        "stage_4": "Abscess/Severe",
        "stage_4_desc": "Advanced infection, possible abscess",
        "visible_issues": "ЁЯСБя╕П Visible Issues",
        "possible_causes": "ЁЯФН Possible Causes",
        "affected_teeth": "ЁЯж╖ Affected Teeth",
        "recommended_treatments": "ЁЯТЙ Recommended Treatments",
        "immediate_concerns": "ЁЯЪи Immediate Concerns",
        "dentist_timeline": "ЁЯУЕ Dental Visit Timeline",
        "prevention_tips": "ЁЯЫбя╕П Prevention Tips",
        "home_care": "ЁЯПа Home Care Instructions",
        "additional_details": "ЁЯУК Additional Analysis Details",
        "emergency_alert": "тЪая╕П Emergency Alert",
        "emergency_text": "Immediate dental attention recommended!",
        "image_processing": "ЁЯЦ╝я╕П Image Processing & Analysis",
        "grayscale": "Grayscale",
        "edge_detection": "Canny Edge Detection",
        "clahe_enhanced": "CLAHE Enhanced",
        "histogram_title": "Histogram of Pixel Intensities",
        "pixel_intensity": "Pixel Intensity",
        "frequency": "Frequency"
    },
    "hi": {
        "page_title": "ЁЯж╖ рджрдВрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкреЛрд░реНрдЯрд▓",
        "main_header": "ЁЯж╖ рджрдВрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкреЛрд░реНрдЯрд▓",
        "config": "тЪЩя╕П рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди",
        "api_key_found": "тЬЕ OpenRouter API рдХреБрдВрдЬреА рдкрд░реНрдпрд╛рд╡рд░рдг рдЪрд░ рдореЗрдВ рдорд┐рд▓реА",
        "api_key_not_found": "тЪая╕П OpenRouter API рдХреБрдВрдЬреА рдкрд░реНрдпрд╛рд╡рд░рдг рдЪрд░ рдореЗрдВ рдирд╣реАрдВ рдорд┐рд▓реА",
        "api_key_label": "OpenRouter API рдХреБрдВрдЬреА",
        "language_selection": "ЁЯМН рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ / Language / Idioma",
        "audio_settings": "ЁЯО╡ рдСрдбрд┐рдпреЛ рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
        "voice_selection": "рдЖрд╡рд╛рдЬрд╝ рдЪрдпрди",
        "speech_speed": "рдмреЛрд▓рдиреЗ рдХреА рдЧрддрд┐",
        "instructions": "ЁЯУЛ рдирд┐рд░реНрджреЗрд╢",
        "instructions_text": """
        1. рдЕрдкрдиреА OpenRouter API рдХреБрдВрдЬреА рджрд░реНрдЬ рдХрд░реЗрдВ
        2. рджрд╛рдВрдд/рджрд╛рдВрддреЛрдВ рдХреА рд╕реНрдкрд╖реНрдЯ рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ
        3. рддреНрд╡рд░рд┐рдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рд▓рд┐рдП 'рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ' рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ
        4. рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рд░рд┐рдкреЛрд░реНрдЯ рдФрд░ рдСрдбрд┐рдпреЛ рд╕рд╛рд░рд╛рдВрд╢ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
        
        **рдЫрд╡рд┐ рд╕реБрдЭрд╛рд╡:**
        - рдЕрдЪреНрдЫреА рд░реЛрд╢рдиреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
        - рдХреИрдорд░рд╛ рд╕реНрдерд┐рд░ рд░рдЦреЗрдВ
        - рдкреНрд░рднрд╛рд╡рд┐рдд рдХреНрд╖реЗрддреНрд░ рдкрд░ рдлреЛрдХрд╕ рдХрд░реЗрдВ
        - рдзреБрдВрдзрд▓реА рдЫрд╡рд┐рдпреЛрдВ рд╕реЗ рдмрдЪреЗрдВ
        """,
        "disclaimer": "тЪая╕П рдЕрд╕реНрд╡реАрдХрд░рдг",
        "disclaimer_text": "рдпрд╣ AI рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗрд╡рд▓ рд╢реИрдХреНрд╖рд┐рдХ рдЙрджреНрджреЗрд╢реНрдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╣реИ рдФрд░ рдкреЗрд╢реЗрд╡рд░ рджрдВрдд рдкрд░рд╛рдорд░реНрд╢ рдХрд╛ рд╕реНрдерд╛рди рдирд╣реАрдВ рд▓реЗ рд╕рдХрддрд╛ред рдЙрдЪрд┐рдд рдирд┐рджрд╛рди рдФрд░ рдЙрдкрдЪрд╛рд░ рдХреЗ рд▓рд┐рдП рд╣рдореЗрд╢рд╛ рдпреЛрдЧреНрдп рджрдВрдд рдЪрд┐рдХрд┐рддреНрд╕рдХ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВред",
        "welcome_title": "рджрдВрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкреЛрд░реНрдЯрд▓ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
        "welcome_text": "рдпрд╣ AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЙрдкрдХрд░рдг рджрдВрдд рдЫрд╡рд┐рдпреЛрдВ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИ рддрд╛рдХрд┐ рд╕рдВрднрд╛рд╡рд┐рдд рдХреИрд╡рд┐рдЯреА рдХреА рдкрд╣рдЪрд╛рди рдХреА рдЬрд╛ рд╕рдХреЗ рдФрд░ рддрддреНрдХрд╛рд▓ рдСрдбрд┐рдпреЛ рд╕рд╛рд░рд╛рдВрд╢ рдХреЗ рд╕рд╛рде рд╡реНрдпрд╛рдкрдХ рдореМрдЦрд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХреА рдЬрд╛ рд╕рдХреЗред",
        "enter_api_key": "рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рд╕рд╛рдЗрдбрдмрд╛рд░ рдореЗрдВ рдЕрдкрдиреА OpenRouter API рдХреБрдВрдЬреА рджрд░реНрдЬ рдХрд░реЗрдВред",
        "upload_image": "ЁЯУд рджрд╛рдВрдд рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        "upload_help": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рд▓рд┐рдП рджрд╛рдВрдд рдпрд╛ рджрдВрдд рдХреНрд╖реЗрддреНрд░ рдХреА рд╕реНрдкрд╖реНрдЯ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        "uploaded_image": "рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдЫрд╡рд┐",
        "analyze_button": "ЁЯФН рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ рдФрд░ рдСрдбрд┐рдпреЛ рдмрдирд╛рдПрдВ",
        "analyzing": "ЁЯдЦ рджрдВрдд рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
        "generating_audio": "ЁЯОЩя╕П рдСрдбрд┐рдпреЛ рд╕рд╛рд░рд╛рдВрд╢ рдмрдирд╛ рд░рд╣реЗ рд╣реИрдВ...",
        "creating_audio": "ЁЯО╡ рдСрдбрд┐рдпреЛ рдлрд╝рд╛рдЗрд▓ рдмрдирд╛ рд░рд╣реЗ рд╣реИрдВ...",
        "analysis_complete": "тЬЕ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкреВрд░реНрдг!",
        "analysis_results": "ЁЯУК рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо",
        "audio_summary": "ЁЯО╡ рдСрдбрд┐рдпреЛ рд╕рд╛рд░рд╛рдВрд╢",
        "audio_summary_text": "рдиреАрдЪреЗ рдЕрдкрдиреЗ рджрдВрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╕рд╛рд░рд╛рдВрд╢ рдХреЛ рд╕реБрдиреЗрдВ:",
        "download_audio": "ЁЯТ╛ рдСрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        "download_report": "ЁЯУД рд░рд┐рдкреЛрд░реНрдЯ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        "download_script": "ЁЯУЭ рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        "audio_failed": "ЁЯФК рдСрдбрд┐рдпреЛ рдЬреЗрдирд░реЗрд╢рди рд╡рд┐рдлрд▓ рд░рд╣рд╛, рд▓реЗрдХрд┐рди рдЖрдк рдЕрднреА рднреА рдЯреЗрдХреНрд╕реНрдЯ рд╕рд╛рд░рд╛рдВрд╢ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:",
        "audio_script": "рдСрдбрд┐рдпреЛ рд╕реНрдХреНрд░рд┐рдкреНрдЯ",
        "analysis_failed": "тЭМ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╡рд┐рдлрд▓",
        "cavity_stages_guide": "ЁЯУЪ рдХреИрд╡рд┐рдЯреА рдЪрд░рдг рдЧрд╛рдЗрдб",
        "stage_0": "рдХреЛрдИ рдХреИрд╡рд┐рдЯреА рдирд╣реАрдВ",
        "stage_0_desc": "рд╕реНрд╡рд╕реНрде рджрд╛рдВрдд рдпрд╛ рдмрд╣реБрдд рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдбреАрдорд┐рдирд░рд▓рд╛рдЗрдЬреЗрд╢рди",
        "stage_1": "рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдЗрдиреЗрдорд▓ рдХреНрд╖рдп",
        "stage_1_desc": "рд╕рдлреЗрдж рдзрдмреНрдмреЗ рдпрд╛ рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдЗрдиреЗрдорд▓ рдХреНрд╖рддрд┐",
        "stage_2": "рдбреЗрдВрдЯрд┐рди рдХреНрд╖рдп",
        "stage_2_desc": "рдХреИрд╡рд┐рдЯреА рдбреЗрдВрдЯрд┐рди рдкрд░рдд рддрдХ рдкрд╣реБрдВрдЪ рдЧрдИ рд╣реИ",
        "stage_3": "рдкрд▓реНрдк рд╕рдВрд▓рдЧреНрдирддрд╛",
        "stage_3_desc": "рд╕рдВрдХреНрд░рдордг рджрд╛рдВрдд рдХреЗ рдкрд▓реНрдк рддрдХ рдкрд╣реБрдВрдЪ рдЧрдпрд╛ рд╣реИ",
        "stage_4": "рдлреЛрдбрд╝рд╛/рдЧрдВрднреАрд░",
        "stage_4_desc": "рдЙрдиреНрдирдд рд╕рдВрдХреНрд░рдордг, рд╕рдВрднрд╛рд╡рд┐рдд рдлреЛрдбрд╝рд╛",
        "visible_issues": "ЁЯСБя╕П рджрд┐рдЦрд╛рдИ рджреЗрдиреЗ рд╡рд╛рд▓реА рд╕рдорд╕реНрдпрд╛рдПрдВ",
        "possible_causes": "ЁЯФН рд╕рдВрднрд╛рд╡рд┐рдд рдХрд╛рд░рдг",
        "affected_teeth": "ЁЯж╖ рдкреНрд░рднрд╛рд╡рд┐рдд рджрд╛рдВрдд",
        "recommended_treatments": "ЁЯТЙ рдЕрдиреБрд╢рдВрд╕рд┐рдд рдЙрдкрдЪрд╛рд░",
        "immediate_concerns": "ЁЯЪи рддрддреНрдХрд╛рд▓ рдЪрд┐рдВрддрд╛рдПрдВ",
        "dentist_timeline": "ЁЯУЕ рджрдВрдд рдЪрд┐рдХрд┐рддреНрд╕рдХ рдХреА рдпрд╛рддреНрд░рд╛ рд╕рдордпрд░реЗрдЦрд╛",
        "prevention_tips": "ЁЯЫбя╕П рд░реЛрдХрдерд╛рдо рдпреБрдХреНрддрд┐рдпрд╛рдБ",
        "home_care": "ЁЯПа рдШрд░реЗрд▓реВ рджреЗрдЦрднрд╛рд▓ рдирд┐рд░реНрджреЗрд╢",
        "additional_details": "ЁЯУК рдЕрддрд┐рд░рд┐рдХреНрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╡рд┐рд╡рд░рдг",
        "emergency_alert": "тЪая╕П рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЪреЗрддрд╛рд╡рдиреА",
        "emergency_text": "рддрддреНрдХрд╛рд▓ рджрдВрдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдзреНрдпрд╛рди рдЕрдиреБрд╢рдВрд╕рд┐рдд!",
        "image_processing": "ЁЯЦ╝я╕П рдЫрд╡рд┐ рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг рдФрд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "grayscale": "рдЧреНрд░реЗрд╕реНрдХреЗрд▓",
        "edge_detection": "рдХреИрдиреА рдПрдЬ рдбрд┐рдЯреЗрдХреНрд╢рди",
        "clahe_enhanced": "CLAHE рдПрдиреНрд╣рд╛рдВрд╕реНрдб",
        "histogram_title": "рдкрд┐рдХреНрд╕реЗрд▓ рддреАрд╡реНрд░рддрд╛ рдХрд╛ рд╣рд┐рд╕реНрдЯреЛрдЧреНрд░рд╛рдо",
        "pixel_intensity": "рдкрд┐рдХреНрд╕реЗрд▓ рддреАрд╡реНрд░рддрд╛",
        "frequency": "рдЖрд╡реГрддреНрддрд┐"
    },
    "es": {
        "page_title": "ЁЯж╖ Portal de An├бlisis Dental",
        "main_header": "ЁЯж╖ Portal de An├бlisis Dental",
        "config": "тЪЩя╕П Configuraci├│n",
        "api_key_found": "тЬЕ Clave API de OpenRouter encontrada en variables de entorno",
        "api_key_not_found": "тЪая╕П Clave API de OpenRouter no encontrada en variables de entorno",
        "api_key_label": "Clave API de OpenRouter",
        "language_selection": "ЁЯМН Seleccionar Idioma / Language / рднрд╛рд╖рд╛",
        "audio_settings": "ЁЯО╡ Configuraci├│n de Audio",
        "voice_selection": "Selecci├│n de Voz",
        "speech_speed": "Velocidad del Habla",
        "instructions": "ЁЯУЛ Instrucciones",
        "instructions_text": """
        1. Ingrese su clave API de OpenRouter
        2. Cargue una imagen clara del diente/dientes
        3. Haga clic en 'Analizar Imagen' para an├бlisis instant├бneo
        4. Obtenga autom├бticamente el informe y resumen de audio
        
        **Consejos de Imagen:**
        - Use buena iluminaci├│n
        - Mantenga la c├бmara estable
        - Enfoque en el ├бrea afectada
        - Evite im├бgenes borrosas
        """,
        "disclaimer": "тЪая╕П Descargo de Responsabilidad",
        "disclaimer_text": "Este an├бlisis de IA es solo para fines educativos y no debe reemplazar la consulta dental profesional. Siempre consulte con un dentista calificado para un diagn├│stico y tratamiento adecuados.",
        "welcome_title": "Bienvenido al Portal de An├бlisis Dental",
        "welcome_text": "Esta herramienta impulsada por IA ayuda a analizar im├бgenes dentales para identificar posibles caries y proporcionar informaci├│n completa sobre la salud bucal con res├║menes de audio instant├бneos.",
        "enter_api_key": "Por favor, ingrese su clave API de OpenRouter en la barra lateral para comenzar.",
        "upload_image": "ЁЯУд Cargar Imagen Dental",
        "upload_help": "Cargue una imagen clara del diente o ├бrea dental que desea analizar",
        "uploaded_image": "Imagen Cargada",
        "analyze_button": "ЁЯФН Analizar Imagen y Generar Audio",
        "analyzing": "ЁЯдЦ Analizando imagen dental...",
        "generating_audio": "ЁЯОЩя╕П Generando resumen de audio...",
        "creating_audio": "ЁЯО╡ Creando archivo de audio...",
        "analysis_complete": "тЬЕ ┬бAn├бlisis completo!",
        "analysis_results": "ЁЯУК Resultados del An├бlisis",
        "audio_summary": "ЁЯО╡ Resumen de Audio",
        "audio_summary_text": "Escuche su resumen de an├бlisis dental a continuaci├│n:",
        "download_audio": "ЁЯТ╛ Descargar Audio",
        "download_report": "ЁЯУД Descargar Informe",
        "download_script": "ЁЯУЭ Descargar Gui├│n",
        "audio_failed": "ЁЯФК La generaci├│n de audio fall├│, pero a├║n puede descargar el resumen de texto:",
        "audio_script": "Gui├│n de Audio",
        "analysis_failed": "тЭМ An├бlisis Fallido",
        "cavity_stages_guide": "ЁЯУЪ Gu├нa de Etapas de Caries",
        "stage_0": "Sin Caries",
        "stage_0_desc": "Diente sano o desmineralizaci├│n muy temprana",
        "stage_1": "Caries Temprana del Esmalte",
        "stage_1_desc": "Manchas blancas o da├▒o temprano del esmalte",
        "stage_2": "Caries de Dentina",
        "stage_2_desc": "La caries ha alcanzado la capa de dentina",
        "stage_3": "Afectaci├│n Pulpar",
        "stage_3_desc": "La infecci├│n ha alcanzado la pulpa del diente",
        "stage_4": "Absceso/Grave",
        "stage_4_desc": "Infecci├│n avanzada, posible absceso",
        "visible_issues": "ЁЯСБя╕П Problemas Visibles",
        "possible_causes": "ЁЯФН Causas Posibles",
        "affected_teeth": "ЁЯж╖ Dientes Afectados",
        "recommended_treatments": "ЁЯТЙ Tratamientos Recomendados",
        "immediate_concerns": "ЁЯЪи Preocupaciones Inmediatas",
        "dentist_timeline": "ЁЯУЕ Cronograma de Visita al Dentista",
        "prevention_tips": "ЁЯЫбя╕П Consejos de Prevenci├│n",
        "home_care": "ЁЯПа Instrucciones de Cuidado en Casa",
        "additional_details": "ЁЯУК Detalles Adicionales del An├бlisis",
        "emergency_alert": "тЪая╕П Alerta de Emergencia",
        "emergency_text": "┬бSe recomienda atenci├│n dental inmediata!",
        "image_processing": "ЁЯЦ╝я╕П Procesamiento y An├бlisis de Imagen",
        "grayscale": "Escala de Grises",
        "edge_detection": "Detecci├│n de Bordes Canny",
        "clahe_enhanced": "Mejorado CLAHE",
        "histogram_title": "Histograma de Intensidades de P├нxeles",
        "pixel_intensity": "Intensidad de P├нxel",
        "frequency": "Frecuencia"
    },
    "ta": {
        "page_title": "ЁЯж╖ рокро▓рпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ рокрпЛро░рпНроЯро▓рпН",
        "main_header": "ЁЯж╖ рокро▓рпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ рокрпЛро░рпНроЯро▓рпН",
        "config": "тЪЩя╕П роЙро│рпНро│роорпИро╡рпБ",
        "api_key_found": "тЬЕ OpenRouter API ро╡ро┐роЪрпИ роЪрпВро┤ро▓рпН рооро╛ро▒ро┐роХро│ро┐ро▓рпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ",
        "api_key_not_found": "тЪая╕П OpenRouter API ро╡ро┐роЪрпИ роЪрпВро┤ро▓рпН рооро╛ро▒ро┐роХро│ро┐ро▓рпН роХро╛рогрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ",
        "api_key_label": "OpenRouter API ро╡ро┐роЪрпИ",
        "language_selection": "ЁЯМН роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН / Language / рднрд╛рд╖рд╛",
        "audio_settings": "ЁЯО╡ роЖроЯро┐ропрпЛ роЕроорпИрокрпНрокрпБроХро│рпН",
        "voice_selection": "роХрпБро░ро▓рпН родрпЗро░рпНро╡рпБ",
        "speech_speed": "рокрпЗроЪрпНроЪрпБ ро╡рпЗроХроорпН",
        "instructions": "ЁЯУЛ ро╡ро┤ро┐роорпБро▒рпИроХро│рпН",
        "instructions_text": """
        1. роЙроЩрпНроХро│рпН OpenRouter API ро╡ро┐роЪрпИропрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН
        2. рокро▓рпН/рокро▒рпНроХро│ро┐ройрпН родрпЖро│ро┐ро╡ро╛рой рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН
        3. роЙроЯройроЯро┐ рокроХрпБрокрпНрокро╛ропрпНро╡рпБроХрпНроХрпБ 'рокроЯродрпНродрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпН' роОройрпНрокродрпИроХрпН роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН
        4. родро╛ройро╛роХро╡рпЗ роЕро▒ро┐роХрпНроХрпИ рооро▒рпНро▒рпБроорпН роЖроЯро┐ропрпЛ роЪрпБро░рпБроХрпНроХродрпНродрпИрокрпН рокрпЖро▒ро╡рпБроорпН
        
        **рокроЯроорпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпН:**
        - роиро▓рпНро▓ ро╡рпЖро│ро┐роЪрпНроЪродрпНродрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
        - роХрпЗрооро░ро╛ро╡рпИ роиро┐ро▓рпИропро╛роХ ро╡рпИроХрпНроХро╡рпБроорпН
        - рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ рокроХрпБродро┐ропро┐ро▓рпН роХро╡ройроорпН роЪрпЖро▓рпБродрпНродро╡рпБроорпН
        - роороЩрпНроХро▓ро╛рой рокроЯроЩрпНроХро│рпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН
        """,
        "disclaimer": "тЪая╕П рооро▒рпБрокрпНрокрпБ",
        "disclaimer_text": "роЗроирпНрод AI рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роХро▓рпНро╡ро┐ роирпЛроХрпНроХроЩрпНроХро│рпБроХрпНроХро╛роХ роороЯрпНроЯрпБроорпЗ рооро▒рпНро▒рпБроорпН родрпКро┤ро┐ро▓рпНроорпБро▒рпИ рокро▓рпН роЖро▓рпЛроЪройрпИропрпИ рооро╛ро▒рпНро▒роХрпНроХрпВроЯро╛родрпБ. роЪро░ро┐ропро╛рой роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН рооро▒рпНро▒рпБроорпН роЪро┐роХро┐роЪрпНроЪрпИроХрпНроХрпБ роОрокрпНрокрпЛродрпБроорпН родроХрпБродро┐ро╡ро╛ропрпНроирпНрод рокро▓рпН рооро░рпБродрпНродрпБро╡ро░рпИ роЕрогрпБроХро╡рпБроорпН.",
        "welcome_title": "рокро▓рпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ рокрпЛро░рпНроЯро▓рпБроХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
        "welcome_text": "роЗроирпНрод AI-роЗропроЩрпНроХрпБроорпН роХро░рпБро╡ро┐ рокро▓рпН рокроЯроЩрпНроХро│рпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНродрпБ роЪро╛родрпНродро┐ропрооро╛рой роХрпБро┤ро┐роХро│рпИ роЕроЯрпИропро╛ро│роорпН роХро╛рогро╡рпБроорпН роЙроЯройроЯро┐ роЖроЯро┐ропрпЛ роЪрпБро░рпБроХрпНроХроЩрпНроХро│рпБроЯройрпН ро╡ро┐ро░ро┐ро╡ро╛рой ро╡ро╛ропрпН роЪрпБроХро╛родро╛ро░ роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН роЙродро╡рпБроХро┐ро▒родрпБ.",
        "enter_api_key": "родрпКроЯроЩрпНроХ рокроХрпНроХрокрпНрокроЯрпНроЯрпИропро┐ро▓рпН роЙроЩрпНроХро│рпН OpenRouter API ро╡ро┐роЪрпИропрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН.",
        "upload_image": "ЁЯУд рокро▓рпН рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН",
        "upload_help": "роирпАроЩрпНроХро│рпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроп ро╡ро┐ро░рпБроорпНрокрпБроорпН рокро▓рпН роЕро▓рпНро▓родрпБ рокро▓рпН рокроХрпБродро┐ропро┐ройрпН родрпЖро│ро┐ро╡ро╛рой рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН",
        "uploaded_image": "рокродро┐ро╡рпЗро▒рпНро▒рокрпНрокроЯрпНроЯ рокроЯроорпН",
        "analyze_button": "ЁЯФН рокроЯродрпНродрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНродрпБ роЖроЯро┐ропрпЛро╡рпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН",
        "analyzing": "ЁЯдЦ рокро▓рпН рокроЯродрпНродрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ...",
        "generating_audio": "ЁЯОЩя╕П роЖроЯро┐ропрпЛ роЪрпБро░рпБроХрпНроХродрпНродрпИ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒родрпБ...",
        "creating_audio": "ЁЯО╡ роЖроЯро┐ропрпЛ роХрпЛрокрпНрокрпИ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒родрпБ...",
        "analysis_complete": "тЬЕ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роорпБроЯро┐роирпНродродрпБ!",
        "analysis_results": "ЁЯУК рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роорпБроЯро┐ро╡рпБроХро│рпН",
        "audio_summary": "ЁЯО╡ роЖроЯро┐ропрпЛ роЪрпБро░рпБроХрпНроХроорпН",
        "audio_summary_text": "роХрпАро┤рпЗ роЙроЩрпНроХро│рпН рокро▓рпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпБро░рпБроХрпНроХродрпНродрпИроХрпН роХрпЗро│рпБроЩрпНроХро│рпН:",
        "download_audio": "ЁЯТ╛ роЖроЯро┐ропрпЛро╡рпИ рокродро┐ро╡ро┐ро▒роХрпНроХро╡рпБроорпН",
        "download_report": "ЁЯУД роЕро▒ро┐роХрпНроХрпИропрпИ рокродро┐ро╡ро┐ро▒роХрпНроХро╡рпБроорпН",
        "download_script": "ЁЯУЭ ро╕рпНроХро┐ро░ро┐рокрпНроЯрпИ рокродро┐ро╡ро┐ро▒роХрпНроХро╡рпБроорпН",
        "audio_failed": "ЁЯФК роЖроЯро┐ропрпЛ роЙро░рпБро╡ро╛роХрпНроХроорпН родрпЛро▓рпНро╡ро┐ропрпБро▒рпНро▒родрпБ, роЖройро╛ро▓рпН роирпАроЩрпНроХро│рпН роЗройрпНройрпБроорпН роЙро░рпИ роЪрпБро░рпБроХрпНроХродрпНродрпИ рокродро┐ро╡ро┐ро▒роХрпНроХро▓ро╛роорпН:",
        "audio_script": "роЖроЯро┐ропрпЛ ро╕рпНроХро┐ро░ро┐рокрпНроЯрпН",
        "analysis_failed": "тЭМ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ родрпЛро▓рпНро╡ро┐ропроЯрпИроирпНродродрпБ",
        "cavity_stages_guide": "ЁЯУЪ роХрпБро┤ро┐ роиро┐ро▓рпИроХро│рпН ро╡ро┤ро┐роХро╛роЯрпНроЯро┐",
        "stage_0": "роХрпБро┤ро┐ роЗро▓рпНро▓рпИ",
        "stage_0_desc": "роЖро░рпЛроХрпНроХро┐ропрооро╛рой рокро▓рпН роЕро▓рпНро▓родрпБ рооро┐роХ роЖро░роорпНрок роирпАро░рпНрооро┐ройрпНрооро╛ро▒рпНро▒роорпН",
        "stage_1": "роЖро░роорпНрок рокро▒рпНроЪро┐рокрпНрокро┐ роЪро┐родрпИро╡рпБ",
        "stage_1_desc": "ро╡рпЖро│рпНро│рпИ рокрпБро│рпНро│ро┐роХро│рпН роЕро▓рпНро▓родрпБ роЖро░роорпНрок рокро▒рпНроЪро┐рокрпНрокро┐ роЪрпЗродроорпН",
        "stage_2": "роЯрпЖройрпНроЯро┐ройрпН роЪро┐родрпИро╡рпБ",
        "stage_2_desc": "роХрпБро┤ро┐ роЯрпЖройрпНроЯро┐ройрпН роЕроЯрпБроХрпНроХрпИ роЕроЯрпИроирпНродрпБро│рпНро│родрпБ",
        "stage_3": "роХрпВро┤рпН роЪроорпНрокроирпНродрокрпНрокроЯрпБродро▓рпН",
        "stage_3_desc": "родрпКро▒рпНро▒рпБ рокро▓рпНро▓ро┐ройрпН роХрпВро┤рпИ роЕроЯрпИроирпНродрпБро│рпНро│родрпБ",
        "stage_4": "рокрпБрогрпН/роХроЯрпБроорпИропро╛рой",
        "stage_4_desc": "роорпЗроорпНрокроЯрпНроЯ родрпКро▒рпНро▒рпБ, роЪро╛родрпНродро┐ропрооро╛рой рокрпБрогрпН",
        "visible_issues": "ЁЯСБя╕П родрпЖро░ро┐ропрпБроорпН рокро┐ро░роЪрпНроЪро┐ройрпИроХро│рпН",
        "possible_causes": "ЁЯФН роЪро╛родрпНродро┐ропрооро╛рой роХро╛ро░рогроЩрпНроХро│рпН",
        "affected_teeth": "ЁЯж╖ рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ рокро▒рпНроХро│рпН",
        "recommended_treatments": "ЁЯТЙ рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ роЪро┐роХро┐роЪрпНроЪрпИроХро│рпН",
        "immediate_concerns": "ЁЯЪи роЙроЯройроЯро┐ роХро╡ро▓рпИроХро│рпН",
        "dentist_timeline": "ЁЯУЕ рокро▓рпН рооро░рпБродрпНродрпБро╡ро░рпН ро╡ро░рпБроХрпИ роХро╛ро▓ро╡ро░ро┐роЪрпИ",
        "prevention_tips": "ЁЯЫбя╕П родроЯрпБрокрпНрокрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН",
        "home_care": "ЁЯПа ро╡рпАроЯрпНроЯрпБ рокро░ро╛рооро░ро┐рокрпНрокрпБ ро╡ро┤ро┐роорпБро▒рпИроХро│рпН",
        "additional_details": "ЁЯУК роХрпВроЯрпБродро▓рпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ ро╡ро┐ро╡ро░роЩрпНроХро│рпН",
        "emergency_alert": "тЪая╕П роЕро╡роЪро░ роОроЪрпНроЪро░ро┐роХрпНроХрпИ",
        "emergency_text": "роЙроЯройроЯро┐ рокро▓рпН роЪро┐роХро┐роЪрпНроЪрпИ рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ!",
        "image_processing": "ЁЯЦ╝я╕П рокроЯроорпН роЪрпЖропро▓ро╛роХрпНроХроорпН рооро▒рпНро▒рпБроорпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
        "grayscale": "роЪро╛роорпНрокро▓рпН роЕро│ро╡рпБ",
        "edge_detection": "роХрпЗройро┐ ро╡ро┐ро│ро┐роорпНрокрпБ роХрогрпНроЯро▒ро┐родро▓рпН",
        "clahe_enhanced": "CLAHE роорпЗроорпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯродрпБ",
        "histogram_title": "рокро┐роХрпНроЪро▓рпН родрпАро╡ро┐ро░родрпНродро┐ройрпН ро╡ро░ро▓ро╛ро▒рпНро▒рпБ ро╡ро░рпИрокроЯроорпН",
        "pixel_intensity": "рокро┐роХрпНроЪро▓рпН родрпАро╡ро┐ро░роорпН",
        "frequency": "роЕродро┐ро░рпНро╡рпЖрогрпН"
    }
}

def t(key, lang="en"):
    """Translation helper function"""
    return TRANSLATIONS.get(lang, TRANSLATIONS["en"]).get(key, key)

# Page configuration
st.set_page_config(
    page_title="ЁЯж╖ Dental Analysis Portal",
    page_icon="ЁЯж╖",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state for language
if 'language' not in st.session_state:
    st.session_state.language = 'en'

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        color: #2E86AB;
        margin-bottom: 2rem;
    }
    .info-card {
        background-color: #f0f8ff;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #2E86AB;
        margin: 1rem 0;
    }
    .warning-card {
        background-color: #fff5f5;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #e53e3e;
        margin: 1rem 0;
    }
    .success-card {
        background-color: #f0fff4;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #38a169;
        margin: 1rem 0;
    }
    .cavity-stage {
        font-size: 1.5rem;
        font-weight: bold;
        padding: 0.5rem;
        border-radius: 5px;
        text-align: center;
        margin: 1rem 0;
    }
    .stage-0 { background-color: #c6f6d5; color: #22543d; }
    .stage-1 { background-color: #fed7d7; color: #742a2a; }
    .stage-2 { background-color: #fbb6ce; color: #702459; }
    .stage-3 { background-color: #fc8181; color: #742a2a; }
    .stage-4 { background-color: #e53e3e; color: white; }
    .audio-section {
        background-color: #f8f9ff;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #4c51bf;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def encode_image(image):
    """Convert PIL image to base64 string"""
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    return img_str


def show_image_processing(image, lang):
    """Perform and display image processing analysis"""
    st.header(t("image_processing", lang))

    # Convert PIL to OpenCV format
    img_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

    # Convert to grayscale
    gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY)

    # Canny edge detection
    edges = cv2.Canny(gray, 100, 200)

    # Histogram of pixel intensities
    fig, ax = plt.subplots()
    ax.hist(gray.ravel(), bins=256, range=(0, 256), color='gray')
    ax.set_title(t("histogram_title", lang))
    ax.set_xlabel(t("pixel_intensity", lang))
    ax.set_ylabel(t("frequency", lang))
    st.pyplot(fig)

    # CLAHE (Contrast Limited Adaptive Histogram Equalization)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    clahe_img = clahe.apply(gray)

    # Display results
    col1, col2, col3 = st.columns(3)
    with col1:
        st.image(gray, caption=t("grayscale", lang), use_column_width=True, clamp=True)
    with col2:
        st.image(edges, caption=t("edge_detection", lang), use_column_width=True, clamp=True)
    with col3:
        st.image(clahe_img, caption=t("clahe_enhanced", lang), use_column_width=True, clamp=True)


def translate_text(text, target_lang, api_key):
    """Translate text using OpenRouter API with Gemini"""
    if target_lang == "en":
        return text
    
    lang_names = {
        "hi": "Hindi",
        "es": "Spanish", 
        "ta": "Tamil"
    }
    
    prompt = f"Translate the following text to {lang_names.get(target_lang, 'English')}. Only provide the translation, no additional text:\n\n{text}"
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    data = {
        "model": "google/gemini-2.5-flash",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 500,
        "temperature": 0.3
    }
    
    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content'].strip()
        else:
            return text
    except:
        return text


def analyze_tooth_image(image, api_key, lang):
    """Analyze tooth image using Gemini API through OpenRouter"""
    
    # Convert image to base64
    img_base64 = encode_image(image)
    
    # Comprehensive prompt for dental analysis
    lang_instruction = ""
    if lang != "en":
        lang_names = {"hi": "Hindi", "es": "Spanish", "ta": "Tamil"}
        lang_instruction = f"\n\nIMPORTANT: Provide all text fields in {lang_names.get(lang, 'English')} language."
    
    prompt = f"""
    You are an expert dental AI assistant. Analyze this tooth/dental image and provide a comprehensive analysis in JSON format with the following structure:
    If you think there is no cavity or dental issues, please indicate uncertainty appropriately.{lang_instruction}

    {{
        "cavity_stage": "Stage 0-4 (0=No cavity, 1=Early enamel decay, 2=Dentin decay, 3=Pulp involvement, 4=Abscess/severe infection)",
        "cavity_present": true/false,
        "affected_teeth": ["list of affected tooth numbers if identifiable"],
        "severity_level": "None/Mild/Moderate/Severe/Critical",
        "visible_issues": ["list all visible dental issues"],
        "possible_causes": ["detailed list of possible causes for the observed condition"],
        "immediate_concerns": ["urgent issues requiring immediate attention"],
        "recommended_treatments": ["list of recommended treatments"],
        "prevention_tips": ["specific prevention advice"],
        "emergency_level": "None/Low/Medium/High/Critical",
        "estimated_timeline": "how long this condition likely took to develop",
        "prognosis": "likely outcome with and without treatment",
        "home_care_instructions": ["immediate home care steps"],
        "when_to_see_dentist": "timeline for dental visit",
        "additional_notes": "any other relevant observations"
    }}

    Analyze the image carefully and provide detailed, accurate information. If you cannot clearly see dental issues, indicate uncertainty appropriately.
    """

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "google/gemini-2.5-flash",
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": prompt
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{img_base64}"
                        }
                    }
                ]
            }
        ],
        "max_tokens": 2000,
        "temperature": 0.3
    }

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data
        )
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            
            # Try to parse JSON response
            try:
                # Extract JSON from response if it's wrapped in text
                start_idx = content.find('{')
                end_idx = content.rfind('}') + 1
                if start_idx != -1 and end_idx != 0:
                    json_str = content[start_idx:end_idx]
                    return json.loads(json_str)
                else:
                    return {"error": "No valid JSON found in response", "raw_response": content}
            except json.JSONDecodeError:
                return {"error": "Failed to parse JSON response", "raw_response": content}
        else:
            return {"error": f"API request failed with status {response.status_code}", "details": response.text}
    
    except Exception as e:
        return {"error": f"Request failed: {str(e)}"}

def display_analysis_results(analysis, lang):
    """Display the analysis results in a structured format"""
    
    if "error" in analysis:
        st.error(f"Analysis Error: {analysis['error']}")
        if "raw_response" in analysis:
            st.text_area("Raw Response", analysis["raw_response"], height=200)
        return

    # Cavity Stage Display
    stage = analysis.get("cavity_stage", "Unknown")
    severity = analysis.get("severity_level", "Unknown")
    
    stage_num = "0"
    if "Stage" in stage:
        stage_num = stage.split()[1][0] if len(stage.split()) > 1 else "0"
    
    st.markdown(f"""
    <div class="cavity-stage stage-{stage_num}">
        ЁЯж╖ {stage} - {severity} Severity
    </div>
    """, unsafe_allow_html=True)

    # Emergency Level Alert
    emergency = analysis.get("emergency_level", "None")
    if emergency in ["High", "Critical"]:
        st.markdown(f"""
        <div class="warning-card">
            <h3>{t("emergency_alert", lang)}: {emergency} Priority</h3>
            <p>{t("emergency_text", lang)}</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Create columns for organized display
    col1, col2 = st.columns(2)
    
    with col1:
        # Visible Issues
        st.subheader(t("visible_issues", lang))
        issues = analysis.get("visible_issues", [])
        if issues:
            for issue in issues:
                st.write(f"тАв {issue}")
        else:
            st.write("No specific issues identified")
        
        # Possible Causes
        st.subheader(t("possible_causes", lang))
        causes = analysis.get("possible_causes", [])
        if causes:
            for cause in causes:
                st.write(f"тАв {cause}")
        
        # Affected Teeth
        affected = analysis.get("affected_teeth", [])
        if affected:
            st.subheader(t("affected_teeth", lang))
            st.write(", ".join(affected))
    
    with col2:
        # Recommended Treatments
        st.subheader(t("recommended_treatments", lang))
        treatments = analysis.get("recommended_treatments", [])
        if treatments:
            for treatment in treatments:
                st.write(f"тАв {treatment}")
        
        # Immediate Concerns
        concerns = analysis.get("immediate_concerns", [])
        if concerns:
            st.subheader(t("immediate_concerns", lang))
            for concern in concerns:
                st.write(f"тАв {concern}")
        
        # When to See Dentist
        dentist_timeline = analysis.get("when_to_see_dentist", "As soon as possible")
        st.subheader(t("dentist_timeline", lang))
        st.write(dentist_timeline)
    
    # Prevention and Care
    st.subheader(t("prevention_tips", lang))
    prevention = analysis.get("prevention_tips", [])
    if prevention:
        for tip in prevention:
            st.write(f"тАв {tip}")
    
    st.subheader(t("home_care", lang))
    home_care = analysis.get("home_care_instructions", [])
    if home_care:
        for instruction in home_care:
            st.write(f"тАв {instruction}")
    
    # Additional Information
    with st.expander(t("additional_details", lang)):
        col3, col4 = st.columns(2)
        
        with col3:
            st.write(f"**Estimated Timeline:** {analysis.get('estimated_timeline', 'Not specified')}")
            st.write(f"**Emergency Level:** {emergency}")
            
        with col4:
            st.write(f"**Cavity Present:** {'Yes' if analysis.get('cavity_present', False) else 'No'}")
        
        prognosis = analysis.get("prognosis", "Not provided")
        if prognosis != "Not provided":
            st.write(f"**Prognosis:** {prognosis}")
        
        notes = analysis.get("additional_notes", "")
        if notes:
            st.write(f"**Additional Notes:** {notes}")

def generate_audio_summary(analysis, lang):
    """Generate a text summary suitable for audio narration"""
    if "error" in analysis:
        return "An error occurred during the dental analysis. Please try again with a different image."

    cavity_stage = analysis.get("cavity_stage", "Unknown")
    severity = analysis.get("severity_level", "Unknown")
    emergency = analysis.get("emergency_level", "None")

    summary = f"Dental Analysis Summary. Cavity stage: {cavity_stage}. Severity level: {severity}."

    if emergency in ["High", "Critical"]:
        summary += f" Emergency level: {emergency}. Immediate dental attention is recommended."

    visible_issues = analysis.get("visible_issues", [])
    if visible_issues and len(visible_issues) > 0:
        summary += f" Visible issues include: {', '.join(visible_issues[:3])}."

    treatments = analysis.get("recommended_treatments", [])
    if treatments and len(treatments) > 0:
        summary += f" Recommended treatments: {', '.join(treatments[:2])}."

    home_care = analysis.get("home_care_instructions", [])
    if home_care and len(home_care) > 0:
        summary += f" Home care instructions: {', '.join(home_care[:2])}."

    dentist_timeline = analysis.get("when_to_see_dentist", "As soon as possible")
    summary += f" When to see dentist: {dentist_timeline}."

    return summary

async def generate_edge_tts_audio(text, voice="en-US-AriaNeural", rate="+0%", pitch="+0Hz"):
    """Generate audio file using Edge TTS"""
    try:
        import edge_tts
        import aiohttp
        
        # Create a temporary file for the audio
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_file:
            temp_path = temp_file.name

        # Create SSL context that doesn't verify certificates
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        # Create connector with custom SSL context
        connector = aiohttp.TCPConnector(ssl=ssl_context)
        
        # Create communicate object with custom connector
        async with aiohttp.ClientSession(connector=connector) as session:
            communicate = edge_tts.Communicate(text, voice, rate=rate, pitch=pitch)
            # Monkey patch the session
            communicate._session = session
            await communicate.save(temp_path)

        return temp_path
    except ImportError:
        st.error("Edge TTS is not installed. Please install it with: pip install edge-tts")
        return None
    except Exception as e:
        st.error(f"Error generating audio: {str(e)}")
        return None

def run_async_audio_generation(audio_summary, voice, speed):
    """Run async audio generation in sync context"""
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    try:
        if loop.is_running():
            try:
                import nest_asyncio
                nest_asyncio.apply()
                return loop.run_until_complete(generate_edge_tts_audio(audio_summary, voice, speed))
            except ImportError:
                st.warning("Audio generation requires nest_asyncio. Install with: pip install nest_asyncio")
                return None
        else:
            return loop.run_until_complete(generate_edge_tts_audio(audio_summary, voice, speed))
    except Exception as e:
        st.error(f"Error in audio generation: {str(e)}")
        return None

def create_downloadable_report(analysis, lang):
    """Create downloadable text report"""
    if "error" in analysis:
        return "Analysis Error: Unable to generate report"
    
    report_text = f"""
DENTAL ANALYSIS REPORT
Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
SUMMARY
тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
Cavity Stage: {analysis.get('cavity_stage', 'Unknown')}
Severity: {analysis.get('severity_level', 'Unknown')}
Emergency Level: {analysis.get('emergency_level', 'None')}
Cavity Present: {'Yes' if analysis.get('cavity_present', False) else 'No'}

тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
VISIBLE ISSUES
тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
{chr(10).join([f"тАв {issue}" for issue in analysis.get('visible_issues', ['None identified'])])}

тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
POSSIBLE CAUSES
тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
{chr(10).join([f"тАв {cause}" for cause in analysis.get('possible_causes', ['Not specified'])])}

тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
RECOMMENDED TREATMENTS
тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
{chr(10).join([f"тАв {treatment}" for treatment in analysis.get('recommended_treatments', ['Consult dentist'])])}

тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
IMMEDIATE CONCERNS
тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
{chr(10).join([f"тАв {concern}" for concern in analysis.get('immediate_concerns', ['None identified'])])}

тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
PREVENTION TIPS
тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
{chr(10).join([f"тАв {tip}" for tip in analysis.get('prevention_tips', ['Maintain good oral hygiene'])])}

тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
HOME CARE INSTRUCTIONS
тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
{chr(10).join([f"тАв {instruction}" for instruction in analysis.get('home_care_instructions', ['Follow dentist recommendations'])])}

тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
ADDITIONAL INFORMATION
тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
When to See Dentist: {analysis.get('when_to_see_dentist', 'As soon as possible')}
Estimated Timeline: {analysis.get('estimated_timeline', 'Not specified')}
Prognosis: {analysis.get('prognosis', 'Consult dentist for detailed prognosis')}

Affected Teeth: {', '.join(analysis.get('affected_teeth', [])) or 'Not specified'}

Additional Notes: {analysis.get('additional_notes', 'None')}

тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
DISCLAIMER
тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР
This AI analysis is for educational purposes only and should not replace 
professional dental consultation. Always consult with a qualified dentist 
for proper diagnosis and treatment.
    """
    return report_text.strip()

def main():
    lang = st.session_state.language
    
    # Header
    st.markdown(f'<h1 class="main-header">{t("main_header", lang)}</h1>', unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header(t("config", lang))
        
        # Language Selection
        st.header(t("language_selection", lang))
        language_options = {
            "English": "en",
            "рд╣рд┐рдиреНрджреА (Hindi)": "hi",
            "Espa├▒ol (Spanish)": "es",
            "родрооро┐ро┤рпН (Tamil)": "ta"
        }
        selected_lang = st.selectbox(
            "Select Language",
            list(language_options.keys()),
            index=list(language_options.values()).index(st.session_state.language)
        )
        
        if language_options[selected_lang] != st.session_state.language:
            st.session_state.language = language_options[selected_lang]
            st.rerun()
        
        lang = st.session_state.language
        
        # API Key
        if "OPENROUTER_API_KEY" in os.environ:
            api_key = os.getenv("OPENROUTER_API_KEY")
            st.success(t("api_key_found", lang))
        else:
            st.warning(t("api_key_not_found", lang))
            api_key = st.text_input(t("api_key_label", lang), type="password")

        st.header(t("audio_settings", lang))
        
        # Voice options based on language
        voice_options = {
            "en": {
                "ЁЯЗ║ЁЯЗ╕ Aria (Female)": "en-US-AriaNeural",
                "ЁЯЗ║ЁЯЗ╕ Guy (Male)": "en-US-GuyNeural",
                "ЁЯЗ║ЁЯЗ╕ Jenny (Female)": "en-US-JennyNeural",
                "ЁЯЗмЁЯЗз Libby (Female)": "en-GB-LibbyNeural",
                "ЁЯЗмЁЯЗз Ryan (Male)": "en-GB-RyanNeural"
            },
            "hi": {
                "ЁЯЗоЁЯЗ│ Swara (Female)": "hi-IN-SwaraNeural",
                "ЁЯЗоЁЯЗ│ Madhur (Male)": "hi-IN-MadhurNeural"
            },
            "es": {
                "ЁЯЗкЁЯЗ╕ Elvira (Female)": "es-ES-ElviraNeural",
                "ЁЯЗкЁЯЗ╕ Alvaro (Male)": "es-ES-AlvaroNeural",
                "ЁЯЗ▓ЁЯЗ╜ Dalia (Female)": "es-MX-DaliaNeural",
                "ЁЯЗ▓ЁЯЗ╜ Jorge (Male)": "es-MX-JorgeNeural"
            },
            "ta": {
                "ЁЯЗоЁЯЗ│ Pallavi (Female)": "ta-IN-PallaviNeural",
                "ЁЯЗоЁЯЗ│ Valluvar (Male)": "ta-IN-ValluvarNeural"
            }
        }
        
        current_voices = voice_options.get(lang, voice_options["en"])
        selected_voice = st.selectbox(t("voice_selection", lang), list(current_voices.keys()))
        audio_speed = st.selectbox(t("speech_speed", lang), ["-20%", "-10%", "+0%", "+10%", "+20%"], index=2)
        
        st.header(t("instructions", lang))
        st.markdown(t("instructions_text", lang))
        
        st.header(t("disclaimer", lang))
        st.warning(t("disclaimer_text", lang))
    
    # Main content area
    if not api_key:
        st.markdown(f"""
        <div class="info-card">
            <h3>{t("welcome_title", lang)}</h3>
            <p>{t("welcome_text", lang)}</p>
            <p>{t("enter_api_key", lang)}</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # File upload
    uploaded_file = st.file_uploader(
        t("upload_image", lang), 
        type=['png', 'jpg', 'jpeg'],
        help=t("upload_help", lang)
    )
    
    if uploaded_file is not None:
        # Display uploaded image
        image = Image.open(uploaded_file)
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.image(image, caption=t("uploaded_image", lang), use_column_width=True)
        
        show_image_processing(image, lang)
        
        # Analysis button
        if st.button(t("analyze_button", lang), type="primary", use_container_width=True):
            # Create progress bar
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # Step 1: Image Analysis
            status_text.text(t("analyzing", lang))
            progress_bar.progress(20)
            
            analysis = analyze_tooth_image(image, api_key, lang)
            progress_bar.progress(50)
            
            if "error" not in analysis:
                # Step 2: Generate Audio Summary
                status_text.text(t("generating_audio", lang))
                progress_bar.progress(70)
                
                audio_summary = generate_audio_summary(analysis, lang)
                
                # Step 3: Create Audio File
                status_text.text(t("creating_audio", lang))
                progress_bar.progress(90)
                
                voice_name = voice_options.get(lang, voice_options["en"])[selected_voice]
                audio_path = run_async_audio_generation(audio_summary, voice_name, audio_speed)
                
                # Complete
                progress_bar.progress(100)
                status_text.text(t("analysis_complete", lang))
                
                # Clear progress indicators
                progress_bar.empty()
                status_text.empty()
                
                # Display Results
                st.header(t("analysis_results", lang))
                display_analysis_results(analysis, lang)
                
                # Audio Section
                st.markdown(f"""
                <div class="audio-section">
                    <h3>{t("audio_summary", lang)}</h3>
                    <p>{t("audio_summary_text", lang)}</p>
                </div>
                """, unsafe_allow_html=True)
                
                if audio_path and os.path.exists(audio_path):
                    # Read audio file and display player
                    with open(audio_path, "rb") as audio_file:
                        audio_bytes = audio_file.read()
                    
                    st.audio(audio_bytes, format="audio/mp3")
                    
                    # Download options
                    col_dl1, col_dl2, col_dl3 = st.columns(3)
                    
                    with col_dl1:
                        st.download_button(
                            label=t("download_audio", lang),
                            data=audio_bytes,
                            file_name=f"dental_analysis_audio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp3",
                            mime="audio/mp3"
                        )
                    
                    with col_dl2:
                        st.download_button(
                            label=t("download_report", lang),
                            data=create_downloadable_report(analysis, lang),
                            file_name=f"dental_analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain"
                        )
                    
                    with col_dl3:
                        st.download_button(
                            label=t("download_script", lang),
                            data=audio_summary,
                            file_name=f"dental_audio_script_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain"
                        )
                    
                    # Clean up temporary file
                    try:
                        os.unlink(audio_path)
                    except:
                        pass
                        
                else:
                    st.warning(t("audio_failed", lang))
                    st.text_area(t("audio_script", lang), audio_summary, height=150)
                    
                    col_script1, col_script2 = st.columns(2)
                    with col_script1:
                        st.download_button(
                            label=t("download_script", lang),
                            data=audio_summary,
                            file_name=f"dental_audio_script_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain"
                        )
                    with col_script2:
                        st.download_button(
                            label=t("download_report", lang),
                            data=create_downloadable_report(analysis, lang),
                            file_name=f"dental_analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain"
                        )
            
            else:
                # Clear progress indicators on error
                progress_bar.empty()
                status_text.empty()
                
                st.header(t("analysis_failed", lang))
                st.error(f"Analysis Error: {analysis['error']}")
                if "raw_response" in analysis:
                    st.text_area("Raw Response", analysis["raw_response"], height=200)
    
    # Educational content
    st.header(t("cavity_stages_guide", lang))
    
    stages_info = {
        "Stage 0": (t("stage_0", lang), t("stage_0_desc", lang), "#c6f6d5"),
        "Stage 1": (t("stage_1", lang), t("stage_1_desc", lang), "#fed7d7"),
        "Stage 2": (t("stage_2", lang), t("stage_2_desc", lang), "#fbb6ce"),
        "Stage 3": (t("stage_3", lang), t("stage_3_desc", lang), "#fc8181"),
        "Stage 4": (t("stage_4", lang), t("stage_4_desc", lang), "#e53e3e")
    }
    
    cols = st.columns(5)
    for i, (stage, (title, desc, color)) in enumerate(stages_info.items()):
        with cols[i]:
            st.markdown(f"""
            <div style="background-color: {color}; padding: 1rem; border-radius: 8px; text-align: center;">
                <h4>{stage}</h4>
                <p><strong>{title}</strong></p>
                <p style="font-size: 0.9em;">{desc}</p>
            </div>
            """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
